/*
 * English Dependencies Demo Project
 * Author: jcyuyi@gmail.com
 */

package NLPEnglishEditor;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.BreakIterator;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

public class OpenFileFrame extends javax.swing.JFrame {
    private MainFrame parentFrame;
    private DefaultListModel<String> listModel;
    /**
     * Creates new form AddFileFrame
     */
    public OpenFileFrame() {
        initComponents();
        listModel = new DefaultListModel<>();
        taskList.setModel(listModel);
        btnOpenActionPerformed(null);
    }
   /** parent frame should implementÂ setEntries */
    public void setParentFrame(MainFrame frame) {
        parentFrame = frame;
    }

    private List<NLPEntry> getEntries() {
        List<NLPEntry> entries = new ArrayList<>();
        for (int i = 0; i < listModel.getSize(); i++) {
            String s = listModel.get(i);
            entries.add(NLPEntry.getRawEntryFromString(s));
        }
        return entries;
    }   

    private void addTasksFromList(List<String> list) {
        for (int i = 0; i < list.size(); i++) {
            //Use specific BreakIterator to get sentence
            BreakIterator iterator = BreakIterator.getSentenceInstance(Locale.US);
            String source = list.get(i);
            iterator.setText(source);
            int start = iterator.first();
            for (int end = iterator.next();
                    end != BreakIterator.DONE;
                    start = end, end = iterator.next()) {
                String sentence = source.substring(start, end);
                if (!listModel.contains(sentence)) { //sentence should be unique
                    listModel.addElement(sentence);
                }
            } 
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taskList = new javax.swing.JList();
        btnConfirm = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Task From File");

        taskList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(taskList);

        btnConfirm.setText("Confirm");
        btnConfirm.setActionCommand("");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnOpen.setText("Open...");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 280, Short.MAX_VALUE)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConfirm)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnDelete)
                    .addComponent(btnOpen))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Task From File");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String fileName = f.getName();
                if (f.isFile()) {
                    return fileName.toLowerCase().endsWith(".txt");
                }
                else
                    return false;
            }

            @Override
            public String getDescription() {
                return "Text files(.txt)";
            }
        });
        
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            List<String> lines;
            try { 
                lines = Files.readAllLines(Paths.get(file.toURI()));
            } catch (IOException ex) {
                System.err.println("Error to read file");
                return;
            }
            addTasksFromList(lines);
        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (taskList.getSelectedIndex() >= 0) {
            listModel.remove(taskList.getAnchorSelectionIndex());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        if (parentFrame != null) {
            parentFrame.setEntries(this.getEntries());
        }
        this.dispose();
    }//GEN-LAST:event_btnConfirmActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnOpen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList taskList;
    // End of variables declaration//GEN-END:variables
}
