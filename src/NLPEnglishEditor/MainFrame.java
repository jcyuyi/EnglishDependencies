/*
 * English Dependencies Demo Project
 * Author: jcyuyi@gmail.com
 */
package NLPEnglishEditor;

import java.io.File;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    public MainFrame() {
        initComponents();
        taskPanel.setParentFrame(this);
        nLPTreeEditPanel1.setParentFrame(this);
        nLPDependencyPanel1.setParentFrame(this);
    }
    private List<NLPEntry> entries;
    private NLPEntry workingEntry;

    public List<NLPEntry> getEntries() {
        return entries;
    }

    public void setEntries(List<NLPEntry> entries) {
        this.entries = entries;
        taskPanel.setTasks(entries);
        updateTreePanels();
    }

    public void setWorkingEntryTreeString(String treeString) {
        workingEntry.setTreeString(treeString);
        taskPanel.currentEntryChanged();
        updateTreePanels();
    }

    public void setWorkingEntry(NLPEntry entry) {
        this.workingEntry = entry;
        updateTreePanels();
    }

    public void setNewDependency(NLPEntry entry) {
        setWorkingEntry(entry);
        taskPanel.currentEntryChanged();
    }

    private void updateTreePanels() {
        if (workingEntry != null) {
            nLPTreeEditPanel1.setTreeString(workingEntry.getTreeString());
            nLPTreePanel1.setTreeString(workingEntry.getTreeString());
            nLPDependencyPanel1.setDependencies(workingEntry);
            this.validate();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        nLPTreePanel1 = new NLPEnglishEditor.NLPTreePanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        nLPTreeEditPanel1 = new NLPEnglishEditor.NLPTreeEditPanel();
        nLPDependencyPanel1 = new NLPEnglishEditor.NLPDependencyPanel();
        taskPanel = new NLPEnglishEditor.NLPTaskPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        btnOpen = new javax.swing.JMenuItem();
        btnImport = new javax.swing.JMenuItem();
        btnExport = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NLP English Editer");

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane1.setMinimumSize(new java.awt.Dimension(100, 72));

        nLPTreePanel1.setPreferredSize(new java.awt.Dimension(600, 416));
        jSplitPane1.setLeftComponent(nLPTreePanel1);

        nLPTreeEditPanel1.setMinimumSize(new java.awt.Dimension(100, 68));
        jSplitPane3.setLeftComponent(nLPTreeEditPanel1);
        jSplitPane3.setRightComponent(nLPDependencyPanel1);

        jSplitPane1.setRightComponent(jSplitPane3);

        jSplitPane2.setTopComponent(jSplitPane1);
        jSplitPane2.setRightComponent(taskPanel);

        getContentPane().add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jMenu3.setText("File");

        btnOpen.setText("Open text file...");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        jMenu3.add(btnOpen);

        btnImport.setText("Import task from xml...");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        jMenu3.add(btnImport);

        btnExport.setText("Export task to xml...");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        jMenu3.add(btnExport);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        OpenFileFrame f = new OpenFileFrame();
        f.setParentFrame(this);
        f.setVisible(true);
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                String fileName = f.getName();
                if (f.isFile()) {
                    return fileName.toLowerCase().endsWith(".xml");
                } else {
                    return false;
                }
            }

            @Override
            public String getDescription() {
                return "XML files(.xml)";
            }
        });
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                this.setEntries(NLPXMLHelper.getEntriesFromFile(file));
            } catch (Exception ex) {
                System.err.println("Error to read file");
            }
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return true;
            }

            @Override
            public String getDescription() {
                return "XML files(.xml)";
            }
        });

        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            if (entries == null || entries.isEmpty()) {
                infoBox("Nothing to Export", null);
                return;
            }
            File file = fc.getSelectedFile();
            try {
                NLPXMLHelper.saveToXml(entries, file);
                infoBox("Success", "Export to xml");
            } catch (Exception e) {
                infoBox("Filed", "Export to xml");
            }

        }
    }//GEN-LAST:event_btnExportActionPerformed
    public void infoBox(String infoMessage, String location) {
        JOptionPane.showMessageDialog(null, infoMessage, location, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            MainFrame mainFrame = new MainFrame();
            mainFrame.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnExport;
    private javax.swing.JMenuItem btnImport;
    private javax.swing.JMenuItem btnOpen;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private NLPEnglishEditor.NLPDependencyPanel nLPDependencyPanel1;
    private NLPEnglishEditor.NLPTreeEditPanel nLPTreeEditPanel1;
    private NLPEnglishEditor.NLPTreePanel nLPTreePanel1;
    private NLPEnglishEditor.NLPTaskPanel taskPanel;
    // End of variables declaration//GEN-END:variables
}
